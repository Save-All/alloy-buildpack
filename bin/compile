#!/usr/bin/env bash

BUILD_DIR=$1
CACHE_DIR=$2

GRAFANA_ALLOY_VERSION="v1.4.2"
GRAFANA_ALLOY_URL="https://github.com/grafana/alloy/releases/download/${GRAFANA_ALLOY_VERSION}/alloy-linux-amd64.zip"
GRAFANA_AGENT_VERSION="v0.32.1"  # Update this to the latest version

echo "-----> Downloading Grafana Alloy"
curl -L -o grafana-alloy.zip $GRAFANA_ALLOY_URL

echo "-----> Installing Grafana Alloy"
unzip grafana-alloy.zip -d $BUILD_DIR/bin
mv $BUILD_DIR/bin/alloy-linux-amd64 $BUILD_DIR/bin/alloy
chmod +x $BUILD_DIR/bin/alloy

# Create a basic configuration file
echo "-----> Creating Grafana Alloy configuration"
cat > $BUILD_DIR/config.alloy.celery <<EOL
prometheus.exporter.self "alloy_check" { }

discovery.relabel "alloy_check" {
  targets = prometheus.exporter.self.alloy_check.targets

  rule {
    target_label = "instance"
    replacement  = env("DYNO")
  }

  rule {
    target_label = "job"
    replacement  = "integrations/alloy-check"
  }
}

prometheus.scrape "alloy_check" {
  targets    = discovery.relabel.alloy_check.output
  forward_to = [prometheus.relabel.alloy_check.receiver]  

  scrape_interval = "180s"
}

prometheus.relabel "alloy_check" {
  forward_to = [prometheus.remote_write.metrics_service.receiver]

}


prometheus.remote_write "metrics_service" {
  endpoint {
    url = env("PROMETHEUS_PUSH_URL")

    basic_auth {
      username = env("ALLOY_USERNAME")
      password = env("ALLOY_PASSWORD")
    }
  }
}

otelcol.receiver.otlp "default" {
	http {
    endpoint = "0.0.0.0:4318"
  }

	output {
		metrics = [otelcol.processor.resourcedetection.default.input]
	}
}

otelcol.processor.resourcedetection "default" {
	detectors = ["env", "system", "heroku"]

	system {
		hostname_sources = ["os"]
	}

	output {
		metrics = [otelcol.processor.transform.drop_unneeded_resource_attributes.input]
	}
}

otelcol.processor.transform "drop_unneeded_resource_attributes" {
	// https://grafana.com/docs/alloy/latest/reference/components/otelcol.processor.transform/
	error_mode = "ignore"


	metric_statements {
		context    = "resource"
		statements = [
			"delete_key(attributes, \"k8s.pod.start_time\")",
			"delete_key(attributes, \"os.description\")",
			"delete_key(attributes, \"os.type\")",
			"delete_key(attributes, \"process.command_args\")",
			"delete_key(attributes, \"process.executable.path\")",
			"delete_key(attributes, \"process.pid\")",
			"delete_key(attributes, \"process.runtime.description\")",
			"delete_key(attributes, \"process.runtime.name\")",
			"delete_key(attributes, \"process.runtime.version\")",
		]
	}

	output {
		metrics = [otelcol.processor.transform.add_resource_attributes_as_metric_attributes.input]
	}
}

otelcol.connector.host_info "default" {
	host_identifiers = ["host.name"]

	output {
		metrics = [otelcol.processor.batch.default.input]
	}
}

otelcol.processor.transform "add_resource_attributes_as_metric_attributes" {
	error_mode = "ignore"

	metric_statements {
		context    = "datapoint"
		statements = [
			"set(attributes[\"deployment.environment\"], resource.attributes[\"deployment.environment\"])",
			"set(attributes[\"service.version\"], resource.attributes[\"service.version\"])",
		]
	}

	output {
		metrics = [otelcol.processor.batch.default.input]
	}
}

otelcol.processor.batch "default" {
	output {
		metrics = [otelcol.exporter.otlphttp.grafana_cloud.input]
		logs    = [otelcol.exporter.otlphttp.grafana_cloud.input]
		traces  = [otelcol.exporter.otlphttp.grafana_cloud.input]
	}
}

otelcol.exporter.otlphttp "grafana_cloud" {
	client {
		endpoint = "https://otlp-gateway-prod-us-east-0.grafana.net/otlp"
		auth     = otelcol.auth.basic.grafana_cloud.handler
	}
}

otelcol.auth.basic "grafana_cloud" {
	username = env("GRAFANA_CLOUD_USERNAME")
	password = env("GRAFANA_CLOUD_PASSWORD")
}  
EOL

cat > $BUILD_DIR/config.alloy.web << 'EOL'
prometheus.exporter.self "alloy_check" { }

discovery.relabel "alloy_check" {
  targets = prometheus.exporter.self.alloy_check.targets

  rule {
    target_label = "instance"
    replacement  = "web"
  }

  rule {
    target_label = "job"
    replacement  = "integrations/alloy-check"
  }
}

prometheus.scrape "alloy_check" {
  targets    = discovery.relabel.alloy_check.output
  forward_to = [prometheus.relabel.alloy_check.receiver]  

  scrape_interval = "180s"
}

prometheus.relabel "alloy_check" {
  forward_to = [prometheus.remote_write.metrics_service.receiver]

  rule {
    source_labels = ["__name__"]
    regex         = "(flask_.*|prometheus_target_sync_length_seconds_sum|prometheus_target_scrapes_.*|prometheus_target_interval.*|prometheus_sd_discovered_targets|alloy_build.*|prometheus_remote_write_wal_samples_appended_total|process_start_time_seconds)"
    action        = "keep"
  }
}

prometheus.remote_write "metrics_service" {
  endpoint {
    url = env("PROMETHEUS_PUSH_URL")

    basic_auth {
      username = env("ALLOY_USERNAME")
      password = env("ALLOY_PASSWORD")
    }
  }
}

discovery.relabel "web_dyno" {
  targets = [{
    __address__ = "localhost:" + env("PORT"),
  }]

  rule {
    source_labels = ["__address__"]
    target_label  = "instance"
    replacement   = "web"
  }
}

prometheus.relabel "web_dyno" {
    forward_to = [prometheus.remote_write.metrics_service.receiver]
    rule {
        action       = "keep"
        source_labels = ["path"]
        regex        = "/api/.*"
    }
}

prometheus.scrape "web_dyno" {
  targets    = discovery.relabel.web_dyno.output
  forward_to = [prometheus.relabel.web_dyno.receiver]
  job_name   = "web_metrics/" + env("ENVIRONMENT")
  scrape_interval = "120s"
}
EOL

# Create a start script
echo "-----> Creating start script"
mkdir -p $BUILD_DIR/bin
cat > $BUILD_DIR/bin/start-alloy <<EOL
#!/bin/bash
CONFIG_FILE=/app/config.alloy
nohup /app/bin/alloy run &
EOL
chmod +x $BUILD_DIR/bin/start-alloy
